---
title: "R Vectors"
author: "Michael A. Seaman"
output: html_notebook
---

```{r}

library(here)

```

The vector is the basic data unit in R. In this notebook we will explore
working with vectors in our scripts.

### Creating Vectors

With the exception of scalars, all vector creation requires concantenation,
though some functions will include this implicitly.

```{r}

# This is a scalar. This is also a vector of length 1.

my_scalar <- 13

# This is combining scalars to create a vector with length > 1.

my_vector <- c(13, 52, 44, 60, 29, 48, 57)

# This is to create a numerical sequence.

my_sequential_vector <- 10:17

# This is to create a more complex sequence.

my_next_sequential_vector <- seq(2, 6, by = 0.1)

```

### Characteristics of a vector

The characteristics of a vector are type and length.

```{r}

typeof(my_vector)

length(my_vector)

```

### Subsetting vector elements

An important skill we will use often is to subset desired elements of a
vector. There are many ways to do this. We will look here at some of the most
common methods.

```{r}

# We can subset by position

my_vector[3]

my_vector[c(3,5)]

# We can subset by leaving out elements in certain positions

my_vector[-4]

my_vector[c(-4, -6)]

# We can subset by logical reference

my_vector[c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, FALSE)]

# We can subset by the name of an element

student_score <- c("John" = 92,
                   "Ginger" = 94,
                   "Sara" = 88,
                   "Martin" = 86,
                   "Gordon" = 90)

student_score["Martin"]

student_score[c("Ginger", "Martin")]

# We can use subsetting to modify a vector element

evens_vector <- c(2, 4, 6, 8, 9)
evens_vector[5] <- 10

# That example was so silly that we should get rid of the vector. Note
# that the object will still exist, but it won't contain anything.

evens_vector <- NULL

```

### Useful vector functions

Given that vectors are the basic unit in R, there are oodles of useful vector
functions. Here we will look at a few common ones that we will use
frequently.

```{r}

my_nums <- rep(c(1:3), times = 4)

another_my_nums <- rep(c(1:3), each = 2)

yet_another <- rep(c(1:3), each = 2, times = 4)

my_sorted_vector <- sort(my_vector)

names_vector <- c("John", "Ginger", "Sara", "Martin", "Gordon")

sorted_names_vector <- sort(names_vector)

rev(my_sorted_vector)

range(my_vector)

unique(c(5, 6, 7, 7, 8, 8, 9))

sign(c(-1, 0, 1, 2, 3))

order(my_vector)

my_logicals <- c(TRUE, TRUE, FALSE, TRUE)

any(my_logicals)

all(my_logicals)

```

### Examples of subsetting and vector functions

Here are just a few examples that combine the concepts of subsetting with
a few useful functions.

```{r}

# Let's find all grades of "A" (90 and above) in a vector of scores

score <- c(81, 87, 92, 84, 94, 78, 68, 91, 85, 90)

grade_A <- score[score >= 90]

# Suppose you have a vector of names that correspond to these scores

student <- c("Tabitha", "Shari", "Larry", "Steven", "Harry",
             "Frances", "Martha", "Victoria", "Bryan", "Ann")

# We could use the same method to obtain names of "A" students

student[score >= 90]

# Let's suppose we want to sort the scores. Can we sort the student
# names along with them? Yes!

student <- student[order(score)]
score <- sort(score)

```

### A small coding project

The statistics class data contains the names of students in a statistics
class along with their score on the final exams, out of 100. (Note: a couple
students did not show up for the exam.)
#
Our challenge is to create two new vectors to contain (a) whether or not
the score is in the interquartile range and (b) the grade, using the
following letter assignment scale.

F: 0 - 49
D: 50 - 59
C: 60 - 79
B: 80 - 89
A: 90 - 100

```{r}

# Read in the data.

student_data <- read.csv(here("Data", "Statistics Class Data.csv"))

# Eliminate rows with missing data. (brute force)

score_logical <- !is.na(student_data$Score)
Last_Name <- student_data$Last.Name[score_logical]
First_Name <- student_data$First.Name[score_logical]
Score <- student_data$Score[score_logical]
student_data <- data.frame(Last_Name, First_Name, Score)

# Read in the data.

student_data <- read.csv(here("Data", "Statistics Class Data.csv"))

# Eliminate rows with missing data. (elegant)

student_data <- na.omit(student_data)

# Indicate if the score is in the IQR.

Q1 <- quantile(student_data$Score, 0.25)
Q3 <- quantile(student_data$Score, 0.75)

student_data$IQR <- (student_data$Score > Q1) & (student_data$Score < Q3)

# We can make this more obvious in our dataset.

student_data$IQR <- ifelse(student_data$IQR, "In IQR", "Out of IQR")

# Of course we could have done this all in one step.

student_data$IQR <- ifelse((student_data$Score > Q1) &
                           (student_data$Score < Q3),
                           "In IQR",
                           "Out of IQR")

# Now we need to assign grades. Here's one way. (brute force)

student_data$Grade <- 1:length(student_data$Score)

student_data$Grade <- ifelse(student_data$Score >= 90, "A", student_data$Grade)

student_data$Grade <- ifelse(student_data$Score >= 80 &
                             student_data$Score < 90, "B", student_data$Grade)

student_data$Grade <- ifelse(student_data$Score >= 60 &
                             student_data$Score < 80, "C", student_data$Grade)

student_data$Grade <- ifelse(student_data$Score >= 50 &
                             student_data$Score < 60, "D", student_data$Grade)

student_data$Grade <- ifelse(student_data$Score < 50, "F", student_data$Grade)

# Again assigning grades with a function, cutoff. We'll start by emptying
# the vector so that we know this really works. (elegant)

student_data$Grade <- NULL

student_data$Grade <- cut(student_data$Score,
                          c(0, 50, 60, 80, 90, Inf),
                          right = FALSE,
                          labels = c("F", "D", "C", "B", "A"))

# Putting it all together, here's the entire script with (perhaps) a minimal
# number of lines.

student_data <- read.csv(here("Data", "Statistics Class Data.csv"))
student_data <- na.omit(student_data)

Q1 <- quantile(student_data$Score, 0.25)
Q3 <- quantile(student_data$Score, 0.75)

student_data$IQR <- ifelse((student_data$Score > Q1) &
                           (student_data$Score < Q3),
                           "In IQR",
                           "Out of IQR")

student_data$Grade <- cut(student_data$Score,
                          c(0, 50, 60, 80, 90, Inf),
                          right = FALSE,
                          labels = c("F", "D", "C", "B", "A"))

# We could have actually eliminated two more lines (to make this a four-line
# script) by doing this. Why might this be a bad idea?

student_data$IQR <- ifelse((student_data$Score >
                              quantile(student_data$Score, 0.25)) &
                           (student_data$Score <
                              quantile(student_data$Score, 0.75)),
                           "In IQR",
                           "Out of IQR")

# It turns out that this is not a bad idea after all! Why? Because the
# logical operators in this code (> and <) are vectorized.

```

### Vectorization

Vectorized functions are written to work on an entire vector at once, rather
than one element at a time. This results in increased efficiency (i.e., fewer
lines of code) and speed.

To understand vectorization, let's first look at some code that is not
vectorized.


```{r}

x <- c(5, 11, 19, 13, 6, 22)

sum_x <- 0

for (i in 1:length(x)){
  sum_x <- sum_x + x[i]
}

```

That's the way we would do this with most computer languages. Yet R is
a vectorized language, so we can do it like this.


```{r}

x <- c(5, 11, 19, 13, 6, 22)

sum_x <- sum(x)

```

This works because the sum function is vectorized. Here's another example.
We're going to obtain 500,000 random numbers for each of two variables.

Note that I'm beginning by setting the number of numbers as a variable.
This is good practice. If you are writing code in which you may want to
change values, make it a variable.

```{r}

n <- 500000

x1 <- rnorm(n, 50, 10)
x2 <- rnorm(n, 50, 10)

random_data <- data.frame(x1, x2)

```

We now have 500,000 pairs of data. Each pair is in a row in our data
frame. Let's calculate the mean for each pair. Let's keep track of the
time it takes to do this.

```{r}

start_time <- Sys.time()

row_means <- 1:n

for (i in 1:n){
  row_means[i] <- mean(random_data$x1[i], random_data$x2[i])
}

end_time <- Sys.time()

```

 Here are the means for the first 10 rows.

```{r}

row_means[1:10]

```

Here's how long it took.

```{r}

end_time - start_time

```

Someone has written a vectorized function to obtain the mean of each row.
Let's try it and time it. Let's clear the environment (to make this a
fair experiment) and start from scratch.

```{r}

n <- 500000

x1 <- rnorm(n, 50, 10)
x2 <- rnorm(n, 50, 10)

random_data <- data.frame(x1, x2)

```

Now we're ready.

```{r}

start_time <- Sys.time()

row_means <- rowMeans(random_data)

end_time <- Sys.time()

```

Here are the means for the first 10 rows.

```{r}

row_means[1:10]

```

Here's how long it took.

```{r}

end_time - start_time

```
