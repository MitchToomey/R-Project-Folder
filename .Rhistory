}
sorting_x <- function(df_sums){
c <- unique(df_sums)
l <- length(c)
n <- 1
y <- (1:length(df_sums))
for (i in 1:length(c)) {
for (j in 1:length(df_sums)) {
if(df_sums[j] == c(1)) y[j] <- n
}
l <- l-1
n <- n+1
}
}
View(sorting_x)
sorting_x()
df_sums
sorting_x <- function(df_sums){
View(sorting_x)
u <- unique(sort(df_sums, decreasing = TRUE))
n <- 1
rate_vector <- (1:length(df_sums))
for (i in 1:length(u)) {
for (j in 1:length(df_sums)) {
if(equal(df_sums[j] == u(1)) y[j] <- n
for (i in 1:length(u)) {
for (j in 1:length(df_sums)) {
if(equal(df_sums[j] == u(1))) y[j] <- n
}
}
u <- unique(sort(df_sums, decreasing = TRUE))
n <- 1
rate_vector <- (1:length(df_sums))
for (i in 1:length(u)) {
for (j in 1:length(df_sums)) {
if(equal(df_sums[j] == u(1))) rate_vector[j] <- n
}
}
for (i in 1:length(u)) {
for (j in 1:length(df_sums)) {
if(are_equal(df_sums[j] == u(1))) rate_vector[j] <- n
}
}
for (i in 1:length(u)) {
for (j in 1:length(df_sums)) {
if((df_sums[j] == u(1))) rate_vector[j] <- n
}
}
u <- unique(sort(df_sums, decreasing = TRUE))
n <- 1
rate_vector <- (1:length(df_sums))
for (i in 1:length(u)) {
for (j in 1:length(df_sums)) {
if((df_sums[j] == u(1))) rate_vector[j] <- n
sorting_x <- function(df_sums){
u <- unique(sort(df_sums, decreasing = TRUE))
n <- 1
rate_vector <- (1:length(df_sums))
for (i in 1:length(u)) {
for (j in 1:length(df_sums)) {
if((df_sums[j] == u(1))) rate_vector[j] <- n
}
}
}
u <- unique(sort(df_sums, decreasing = TRUE))
n <- 1
rate_vector <- (1:length(df_sums))
for (i in 1:length(u)) {
for (j in 1:length(df_sums)) {
if(df_sums[j] == u(n)) rate_vector[j] <- n
} n <- n+1
u <- unique(sort(df_sums, decreasing = TRUE))
n <- 1
rate_vector <- (1:length(df_sums))
for (i in 1:length(u)) {
for (j in 1:length(df_sums)) {
if(df_sums[j] == u(n)) rate_vector[j] <- n
}
n <- n+1
}
u <- unique(sort(df_sums, decreasing = TRUE))
n <- 1
rate_vector <- (1:length(df_sums))
for (i in 1:length(u)) {
for (j in 1:length(df_sums)) {
if(df_sums[j] == u[n]) rate_vector[j] <- n
}
n <- n+1
}
}
u <- unique(sort(df_sums, decreasing = TRUE))
n <- 1
rate_vector <- (1:length(df_sums))
for (i in 1:length(u)) {
for (j in 1:length(df_sums)) {
if(df_sums[j] == u[n]) rate_vector[j] <- n
}
n <- n+1
}
rownames(rate_vector) <- c("school 1", "school 2", "school 3")
rate_vector
names(rate_vector) <- c("school 1", "school 2", "school 3")
rate_vector <- order(rate_vector, decreasing = TRUE)
rate_vector
u <- unique(sort(df_sums, decreasing = TRUE))
n <- 1
rate_vector <- (1:length(df_sums))
for (i in 1:length(u)) {
for (j in 1:length(df_sums)) {
if(df_sums[j] == u[n]) rate_vector[j] <- n
}
n <- n+1
}
names(rate_vector) <- c("school 1", "school 2", "school 3")
rate_vector
rate_vector <- sort(rate_vector, decreasing = FALSE)
rate_vector
sorting_x <- function(df_sums){
sorting_x <- function(df_sums){
u <- unique(sort(df_sums, decreasing = TRUE))
n <- 1
rate_vector <- (1:length(df_sums))
names(rate_vector) <- c("school 1", "school 2", "school 3")
for (i in 1:length(u)) {
for (j in 1:length(df_sums)) {
if(df_sums[j] == u[n]) rate_vector[j] <- n
}
n <- n+1
}
rate_vector <- sort(rate_vector, decreasing = FALSE)
}
rater_1 <- c(3, 4, 5)
rater_2 <- c(4, 5, 2)
rater_3 <- c(2, 3, 4)
rater_4 <- c(5, 4, 3)
my_matrix <- cbind(rater_1, rater_2, rater_3, rater_4)
rownames(my_matrix) <- c("school_1", "school_2", "school_3")
my_df <- as.data.frame(my_matrix)
# we want to sum the scores on each row
df_sums <- rowSums(my_df)
my_df <- cbind(my_df, df_sums)
sorting_x <- function(df_sums){
u <- unique(sort(df_sums, decreasing = TRUE))
n <- 1
rate_vector <- (1:length(df_sums))
names(rate_vector) <- c("school 1", "school 2", "school 3")
for (i in 1:length(u)) {
for (j in 1:length(df_sums)) {
if(df_sums[j] == u[n]) rate_vector[j] <- n
}
n <- n+1
}
rate_vector <- sort(rate_vector, decreasing = FALSE)
}
rater_1 <- c(3, 4, 5)
rater_2 <- c(4, 5, 2)
rater_3 <- c(2, 3, 4)
rater_4 <- c(5, 4, 3)
my_matrix <- cbind(rater_1, rater_2, rater_3, rater_4)
rownames(my_matrix) <- c("school_1", "school_2", "school_3")
my_df <- as.data.frame(my_matrix)
rater_1 <- c(3, 4, 5)
rater_2 <- c(4, 5, 2)
rater_3 <- c(2, 3, 4)
rater_4 <- c(5, 4, 3)
my_matrix <- cbind(rater_1, rater_2, rater_3, rater_4)
rownames(my_matrix) <- c("school_1", "school_2", "school_3")
my_df <- as.data.frame(my_matrix)
# we want to sum the scores on each row
df_sums <- rowSums(my_df)
my_df <- cbind(my_df, df_sums)
sorting_x <- function(df_sums){
u <- unique(sort(df_sums, decreasing = TRUE))
n <- 1
rate_vector <- (1:length(df_sums))
names(rate_vector) <- c("school 1", "school 2", "school 3")
for (i in 1:length(u)) {
for (j in 1:length(df_sums)) {
if(df_sums[j] == u[n]) rate_vector[j] <- n
}
n <- n+1
}
rate_vector <- sort(rate_vector, decreasing = FALSE)
}
rater_1 <- c(3, 4, 5)
rater_2 <- c(4, 5, 2)
rater_3 <- c(2, 3, 4)
rater_4 <- c(5, 4, 3)
my_matrix <- cbind(rater_1, rater_2, rater_3, rater_4)
rownames(my_matrix) <- c("school_1", "school_2", "school_3")
my_df <- as.data.frame(my_matrix)
# we want to sum the scores on each row
df_sums <- rowSums(my_df)
my_df <- cbind(my_df, df_sums)
u <- unique(sort(df_sums, decreasing = TRUE))
n <- 1
rate_vector <- (1:length(df_sums))
names(rate_vector) <- c("school 1", "school 2", "school 3")
for (i in 1:length(u)) {
for (j in 1:length(df_sums)) {
if(df_sums[j] == u[n]) rate_vector[j] <- n
}
n <- n+1
}
rate_vector <- sort(rate_vector, decreasing = FALSE)
rate_vector
df_raters <- function(my_df){
rater_1 <- c(3, 4, 5)
rater_2 <- c(4, 5, 2)
rater_3 <- c(2, 3, 4)
rater_4 <- c(5, 4, 3)
my_matrix <- cbind(rater_1, rater_2, rater_3, rater_4)
rownames(my_matrix) <- c("school_1", "school_2", "school_3")
my_df <- as.data.frame(my_matrix)
}
library(here)
source(here("Functions", "Seaman Rater Functions.R", "Project B Functions.R"))
library(here)
source(here("Functions", "Seaman Rater Functions.R", "Project B Functions.R"))
source(here("Functions", "Seaman Rater Functions.R"))
source(here("Functions", "Project B functions.R"))
library(here)
source(here("Functions", "Seaman Rater Functions.R"))
source(here("Functions", "Project B functions.R"))
View(df_rater_sum)
school_rating <- read.csv(here("Data", "Music Performance Data.csv"))
View(school_rating)
school_rating <- read.csv(here("Data", "Music Performance Data.csv"),
row.names = "School")
View(school_rating)
View(school_rating)
View(percent_agreement)
rater_statistics <- function(school_rating) {
# Determine the number of raters
num_raters <- ncol(school_rating)
# Set up PA data frame
PA <- as.data.frame(matrix(nrow = num_raters - 1, ncol = num_raters))
# Set up PA statistics data frame.
PA_statistics <- as.data.frame(matrix(nrow = 4, ncol = num_raters))
rownames(PA_statistics) <- c("Mean", "SD", "Min", "Max")
colnames(PA_statistics) <- colnames(school_rating)
# Calculate PA for each rater and store in matrix
for (i in 1:(num_raters - 1)){
for (j in (i+1):num_raters){
raters_PA <- percent_agreement(school_rating[, i], school_rating[, j])
PA[j-1, i] <- raters_PA
PA[i, j] <- raters_PA
}
}
PA_statistics[1, ] <- sapply(PA, mean)
PA_statistics[2, ] <- sapply(PA, sd)
PA_statistics[3, ] <- sapply(PA, min)
PA_statistics[4, ] <- sapply(PA, max)
# Return data frame
return(PA_statistics)
}
rater_statistics()
rater_statistics(school_rating)
rater_statistics(school_rating)
View(rater_statistics)
library(here)
source(here("Functions", "Seaman Rater Functions.R"))
source(here("Functions", "Project B functions.R"))
school_rating <- read.csv(here("Data", "Music Performance Data.csv"),
row.names = "School")
rater_statistics(school_rating)
rater_statistics(school_rating)
View(rater_collapse)
rater_collapse(school_rating)
rater_collapse(school_rating, collapse_cats = 3)
rater_collapse(school_rating, collapse_cats)
rater_collapse <- function(school_rating, collapse_cats){
# Obtain the number of new categories.
num_cats <- nrow(collapse_cats)
# Replace old ratings with new ratings.
for (i in 1:num_cats){
ratings[ratings >= collapse_cats[i, 1] &
ratings <= collapse_cats[i, 2]] <- i
}
return(ratings)
}
school_rating
rater_collapse(school_rating)
rater_collapse <- function(school_rating, collapse_cats){
# Obtain the number of new categories.
num_cats <- nrow(collapse_cats)
# Replace old ratings with new ratings.
for (i in 1:num_cats){
ratings[ratings >= collapse_cats[i, 1] &
ratings <= collapse_cats[i, 2]] <- i
}
return(school_rating)
}
View(school_rating)
school_rating
rater_collapse <- function(school_rating){
# Obtain the number of new categories.
num_cats <- nrow(school_rating)
# Replace old ratings with new ratings.
for (i in 1:num_cats){
ratings[ratings >= school_rating[i, 1] &
ratings <= school_rating[i, 2]] <- i
}
return(school_rating)
}
View(school_rating)
school_rating
num_cats <- nrow(school_rating)
for (i in 1:num_cats){
ratings[ratings >= school_rating[i, 1] &
ratings <= school_rating[i, 2]] <- i
}
rater_collapse <- function(school_rating){
# Obtain the number of new categories.
num_cats <- nrow(school_rating)
# Replace old ratings with new ratings.
for (i in 1:num_cats){
school_rating[school_rating >= school_rating[i, 1] &
school_rating <= school_rating[i, 2]] <- i
}
return(school_rating)
}
View(school_rating)
num_cats <- nrow(school_rating)
for (i in 1:num_cats){
school_rating[school_rating >= school_rating[i, 1] &
school_rating <= school_rating[i, 2]] <- i
}
return(school_rating)
return(school_rating)
rater_collapse <- function(school_rating, collapse_cats){
# Obtain the number of new categories.
num_cats <- nrow(school_rating)
# Replace old ratings with new ratings.
for (i in 1:num_cats){
school_rating[school_rating >= collapse_cats[i, 1] &
school_rating <= collapse_cats[i, 2]] <- i
}
return(school_rating)
}
View(school_rating)
library(here)
source(here("Functions", "Seaman Rater Functions.R"))
source(here("Functions", "Project B functions.R"))
school_rating <- read.csv(here("Data", "Music Performance Data.csv"),
row.names = "School")
rater_statistics(school_rating)
num_cats <- nrow(school_rating)
View(school_rating)
for (i in 1:num_cats){
school_rating[school_rating >= collapse_cats[i, 1] &
school_rating <= collapse_cats[i, 2]] <- i
}
rater_collapse <- function(school_rating, collapse_cats){
# Obtain the number of new categories.
num_cats <- nrow(school_rating)
# Replace old ratings with new ratings.
for (i in 1:num_cats){
school_rating[school_rating >= collapse_cats[i, 1] &
school_rating <= collapse_cats[i, 2]] <- i
}
return(school_rating)
}
View(school_rating)
library(here)
source(here("Functions", "Seaman Rater Functions.R"))
source(here("Functions", "Project B functions.R"))
school_rating <- read.csv(here("Data", "Music Performance Data.csv"),
row.names = "School")
rater_statistics(school_rating)
rater_collapse <- function(school_rating, collapse_cats){
# Obtain the number of new categories.
num_cats <- nrow(school_rating)
# Replace old ratings with new ratings.
for (i in 1:num_cats){
school_rating[school_rating >= collapse_cats[i, 1] &
school_rating <= collapse_cats[i, 2]] <- i
}
return(school_rating)
}
View(school_rating)
return(school_rating)
rater_collapse <- function(school_rating, collapse_cats){
# Obtain the number of new categories.
num_cats <- nrow(collapse_cats)
# Replace old ratings with new ratings.
for (i in 1:num_cats){
school_rating[school_rating >= collapse_cats[i, 1] &
school_rating <= collapse_cats[i, 2]] <- i
}
return(school_rating)
}
View(school_rating)
school_rating
return(school_rating)
num_cats <- nrow(collapse_cats)
rater_collapse <- function(school_rating, collapse_cats){
# Obtain the number of new categories.
num_cats <- nrow(collapse_cats)
# Replace old ratings with new ratings.
for (i in 1:num_cats){
school_rating[school_rating >= collapse_cats[i, 1] &
school_rating <= collapse_cats[i, 2]] <- i
}
return(school_rating)
}
school_rating
rater_collapse <- function(school_rating, collapse_cats){
# Obtain the number of new categories.
num_cats <- nrow(collapse_cats)
# Replace old ratings with new ratings.
for (i in 1:num_cats){
school_rating[school_rating >= collapse_cats[i, 1] &
school_rating <= collapse_cats[i, 2]] <- i
}
return(collapse_cats)
}
collapse_cats
rater_collapse <- function(school_rating, collapse_cats){
# Obtain the number of new categories.
num_cats <- nrow(collapse_cats)
# Replace old ratings with new ratings.
for (i in 1:num_cats){
school_rating[school_rating >= collapse_cats[i, 1] &
school_rating <= collapse_cats[i, 2]] <- i
}
collapse_cats <- return(collapse_cats)
}
collapse_cats
# study the consistency of raters using
# the original ratings
percent_agreement <- rate_my_data(school_rating)
library(here)
source(here("Functions", "Project B functions.R"))
school_rating <- read.csv(here("Data", "Music Performance Data.csv"),
row.names = "School")
# study the consistency of raters using
# the original ratings
percent_agreement <- rate_my_data(school_rating)
percent_agreement <- formattable(percent_agreement,
align =c("l","c","c","c","c", "c", "c", "c", "c"))
library(formattable)
library(here)
library(formattable)
source(here("Functions", "Project B functions.R"))
school_rating <- read.csv(here("Data", "Music Performance Data.csv"),
row.names = "School")
# study the consistency of raters using
# the original ratings
percent_agreement <- rate_my_data(school_rating)
percent_agreement <- formattable(percent_agreement,
align = c("l","c","c","c","c", "c", "c", "c", "c"))
percent_agreement
final_decision <- final_decision(school_rating)
final_decision <- formattable(final_decision,
align= c("l", "c"))
final_decision
# collapsing into three categories in groups of two
# Collapse into 3 Categories
three_cats <- matrix(c(1, 2, 3, 4, 5, 6),
nrow = 3,
byrow = TRUE)
collapse_cats_3 <- collapsed(school_rating, three_cats)
# PA for three categories
percent_agreement_3 <- rate_my_data(collapse_cats_3)
percent_agreement_3 <- formattable(percent_agreement_3,
align =c("l","c","c","c","c", "c", "c", "c", "c"))
percent_agreement_3
# Decision for 3 collapsed categories
three_data_decision <- final_decision(collapse_cats_3)
library(here)
library(formattable)
source(here("Functions", "Project B functions.R"))
school_rating <- read.csv(here("Data", "Music Performance Data.csv"),
row.names = "School")
# collapsing into three categories in groups of two
# Collapse into 3 Categories
three_cats <- matrix(c(1, 2, 3, 4, 5, 6),
nrow = 3,
byrow = TRUE)
collapse_cats_3 <- collapsed(school_rating, three_cats)
# PA for three categories
percent_agreement_3 <- rate_my_data(collapse_cats_3)
percent_agreement_3 <- formattable(percent_agreement_3,
align =c("l","c","c","c","c", "c", "c", "c", "c"))
percent_agreement_3
# Decision for 3 collapsed categories
three_data_decision <- final_decision(collapse_cats_3)
three_data_decision <- formattable(three_data_decision,
align= c("l","c","c","c","c", "c",
"c", "c", "c"))
three_data_decision
# collapsing into five categories by collapsing somewhat weak and somewhat strong
# categories into a single not weak or strong category
five_cats <- matrix(c(1, 1, 2, 2, 3, 4, 5, 5, 6, 6),
nrow=5,
byrow=TRUE)
five_cats_collapse <- collapsed(school_rating, five_cats)
five_cats_collapse <- formattable(five_cats_collapse,
align= c("l", "c", "c", "c", "c", "c"
,"c","c", "c"))
# PA for 5 Categories
percent_agreement_5 <- rate_my_data(five_cats_collapse)
percent_agreement_5 <- formattable(percent_agreement_5,
align =c("l","c","c","c","c", "c", "c", "c", "c"))
percent_agreement_5
# determine which orchestras win first, second, and third place
five_collapse_final <- final_decision(five_cats_collapse)
five_collapse_final <- formattable(five_collapse_final,
align= c("l", "c", "c", "c", "c", "c"
,"c","c", "c"))
five_collapse_final
