geom_point() +
labs(x="Number of Hospital Beds", y="Number of Doctors")
# health data set with less than 1000 hospital beds
health_2 <- filter(health, hosp.beds < 1000)
ggplot(health_2, aes(x=hosp.beds, y=doctors)) +
geom_point() +
geom_smooth(method=lm , color="red", se=FALSE) +
labs(x="Number of Hospital Beds", y="Number of Doctors")
small_city_density <- read_csv(here("Data", "Small Cities Densities.csv"))
check_density <- small_city_density %>%
count(density)
check_density %>%
filter(n > 1)
# I see that 7 rows have more than 1 n, so we need to figure out how to make
# them a primary key
# see if they are accidental duplicates
small_city_density %>%
filter((density == 57 | density == 80 | density == 86 |
density == 95 | density == 106 | density == 108))
# no duplicate city codes, so just diff cities with same density
check_density <- small_city_density %>%
count(city.code, density)
check_density %>%
filter(n > 1)
small_city_density
# I didn't even realize city code was a primary key! But oh well, it got joined.
health <- health %>%
left_join(small_city_density)
health$density_levels[health$density<=79] <- "Low"
health$density_levels[health$density>=80 & health$density<=120 ] <- "Middle"
health$density_levels[health$density>=121] <- "High"
library(here)
library(tidyverse)
library(dplyr)
library(hrbrthemes)
airlines <- read_csv(here("Data", "Airlines Data.csv"))
nyc_flights <- read_csv(here("Data", "NYC Flights 2013.csv"))
# Joining carriers from carrier data to flights data and renaming
flights_2 <- nyc_flights %>%
left_join(airlines, by = "carrier")
# made a stacked proportional bar plot
flights_2 %>%
group_by(name) %>%
filter(dest == "ATL") %>%
mutate(on_off_time = (arr_delay >= 0) == TRUE | (arr_delay < 0) == FALSE) %>%
ggplot(aes(x=name, fill=on_off_time)) +
geom_bar(position = "fill") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(x="Airlines", y="Proportion Arrived on Time to Atlanta",
fill="on time?")
# not sure how to remova NA's here
# less_than_500 <- flights_2 %>%
#select(flight, name) %>%
#filter(flight <= 500) %>%
#rename(other = "flight")
# I know I need to turn all carrier's with flights less than 500 into other,
# and then have them joined into the data and use that for the bar, but
# do not know how
#flights_2 %>%
#group_by(name) %>%
#filter(dest == "ATL", flight <= 500) %>%
#ggplot(aes(x=name, y=flight)) +
#geom_bar() +
#theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#labs(x="Airlines", y="Number of flights to Atlanta in 2013")
health <- read_csv(here("Data", "Small Cities Health Data.csv"))
health <- as_tibble(health)
ggplot(health, aes(x=hosp.beds, y=doctors)) +
geom_point() +
labs(x="Number of Hospital Beds", y="Number of Doctors")
# health data set with less than 1000 hospital beds
health_2 <- filter(health, hosp.beds < 1000)
ggplot(health_2, aes(x=hosp.beds, y=doctors)) +
geom_point() +
geom_smooth(method=lm , color="red", se=FALSE) +
labs(x="Number of Hospital Beds", y="Number of Doctors")
small_city_density <- read_csv(here("Data", "Small Cities Densities.csv"))
check_density <- small_city_density %>%
count(density)
check_density %>%
filter(n > 1)
# I see that 7 rows have more than 1 n, so we need to figure out how to make
# them a primary key
# see if they are accidental duplicates
small_city_density %>%
filter((density == 57 | density == 80 | density == 86 |
density == 95 | density == 106 | density == 108))
# no duplicate city codes, so just diff cities with same density
check_density <- small_city_density %>%
count(city.code, density)
check_density %>%
filter(n > 1)
small_city_density
# I didn't even realize city code was a primary key! But oh well, it got joined.
health <- health %>%
left_join(small_city_density)
health$density_levels[health$density<=79] <- "Low"
health$density_levels[health$density>=80 & health$density<=120 ] <- "Middle"
health$density_levels[health$density>=121] <- "High"
health$density_levels <- NULL
View(health)
health$density_levels <- NULL
health$density_levels[health$density<=79] <- "Low"
health$density_levels[health$density>=80 & health$density<=120 ] <- "Middle"
health$density_levels[health$density>=121] <- "High"
library(here)
library(tidyverse)
library(dplyr)
library(hrbrthemes)
airlines <- read_csv(here("Data", "Airlines Data.csv"))
nyc_flights <- read_csv(here("Data", "NYC Flights 2013.csv"))
# Joining carriers from carrier data to flights data and renaming
flights_2 <- nyc_flights %>%
left_join(airlines, by = "carrier")
# made a stacked proportional bar plot
flights_2 %>%
group_by(name) %>%
filter(dest == "ATL") %>%
mutate(on_off_time = (arr_delay >= 0) == TRUE | (arr_delay < 0) == FALSE) %>%
ggplot(aes(x=name, fill=on_off_time)) +
geom_bar(position = "fill") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(x="Airlines", y="Proportion Arrived on Time to Atlanta",
fill="on time?")
# not sure how to remova NA's here
# less_than_500 <- flights_2 %>%
#select(flight, name) %>%
#filter(flight <= 500) %>%
#rename(other = "flight")
# I know I need to turn all carrier's with flights less than 500 into other,
# and then have them joined into the data and use that for the bar, but
# do not know how
#flights_2 %>%
#group_by(name) %>%
#filter(dest == "ATL", flight <= 500) %>%
#ggplot(aes(x=name, y=flight)) +
#geom_bar() +
#theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#labs(x="Airlines", y="Number of flights to Atlanta in 2013")
health <- read_csv(here("Data", "Small Cities Health Data.csv"))
health <- as_tibble(health)
ggplot(health, aes(x=hosp.beds, y=doctors)) +
geom_point() +
labs(x="Number of Hospital Beds", y="Number of Doctors")
# health data set with less than 1000 hospital beds
health_2 <- filter(health, hosp.beds < 1000)
ggplot(health_2, aes(x=hosp.beds, y=doctors)) +
geom_point() +
geom_smooth(method=lm , color="red", se=FALSE) +
labs(x="Number of Hospital Beds", y="Number of Doctors")
small_city_density <- read_csv(here("Data", "Small Cities Densities.csv"))
check_density <- small_city_density %>%
count(density)
check_density %>%
filter(n > 1)
# I see that 7 rows have more than 1 n, so we need to figure out how to make
# them a primary key
# see if they are accidental duplicates
small_city_density %>%
filter((density == 57 | density == 80 | density == 86 |
density == 95 | density == 106 | density == 108))
# no duplicate city codes, so just diff cities with same density
check_density <- small_city_density %>%
count(city.code, density)
check_density %>%
filter(n > 1)
small_city_density
# I didn't even realize city code was a primary key! But oh well, it got joined.
health <- health %>%
left_join(small_city_density)
health$density_levels <- NULL
library(here)
library(tidyverse)
library(dplyr)
library(hrbrthemes)
airlines <- read_csv(here("Data", "Airlines Data.csv"))
nyc_flights <- read_csv(here("Data", "NYC Flights 2013.csv"))
# Joining carriers from carrier data to flights data and renaming
flights_2 <- nyc_flights %>%
left_join(airlines, by = "carrier")
# made a stacked proportional bar plot
flights_2 %>%
group_by(name) %>%
filter(dest == "ATL") %>%
mutate(on_off_time = (arr_delay >= 0) == TRUE | (arr_delay < 0) == FALSE) %>%
ggplot(aes(x=name, fill=on_off_time)) +
geom_bar(position = "fill") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(x="Airlines", y="Proportion Arrived on Time to Atlanta",
fill="on time?")
# not sure how to remova NA's here
# less_than_500 <- flights_2 %>%
#select(flight, name) %>%
#filter(flight <= 500) %>%
#rename(other = "flight")
# I know I need to turn all carrier's with flights less than 500 into other,
# and then have them joined into the data and use that for the bar, but
# do not know how
#flights_2 %>%
#group_by(name) %>%
#filter(dest == "ATL", flight <= 500) %>%
#ggplot(aes(x=name, y=flight)) +
#geom_bar() +
#theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#labs(x="Airlines", y="Number of flights to Atlanta in 2013")
health <- read_csv(here("Data", "Small Cities Health Data.csv"))
health <- as_tibble(health)
ggplot(health, aes(x=hosp.beds, y=doctors)) +
geom_point() +
labs(x="Number of Hospital Beds", y="Number of Doctors")
# health data set with less than 1000 hospital beds
health_2 <- filter(health, hosp.beds < 1000)
ggplot(health_2, aes(x=hosp.beds, y=doctors)) +
geom_point() +
geom_smooth(method=lm , color="red", se=FALSE) +
labs(x="Number of Hospital Beds", y="Number of Doctors")
library(here)
library(tidyverse)
library(dplyr)
library(hrbrthemes)
airlines <- read_csv(here("Data", "Airlines Data.csv"))
nyc_flights <- read_csv(here("Data", "NYC Flights 2013.csv"))
# Joining carriers from carrier data to flights data and renaming
flights_2 <- nyc_flights %>%
left_join(airlines, by = "carrier")
# made a stacked proportional bar plot
flights_2 %>%
group_by(name) %>%
filter(dest == "ATL") %>%
mutate(on_off_time = (arr_delay >= 0) == TRUE | (arr_delay < 0) == FALSE) %>%
ggplot(aes(x=name, fill=on_off_time)) +
geom_bar(position = "fill") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(x="Airlines", y="Proportion Arrived on Time to Atlanta",
fill="on time?")
# not sure how to remova NA's here
# less_than_500 <- flights_2 %>%
#select(flight, name) %>%
#filter(flight <= 500) %>%
#rename(other = "flight")
# I know I need to turn all carrier's with flights less than 500 into other,
# and then have them joined into the data and use that for the bar, but
# do not know how
#flights_2 %>%
#group_by(name) %>%
#filter(dest == "ATL", flight <= 500) %>%
#ggplot(aes(x=name, y=flight)) +
#geom_bar() +
#theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#labs(x="Airlines", y="Number of flights to Atlanta in 2013")
health <- read_csv(here("Data", "Small Cities Health Data.csv"))
health <- as_tibble(health)
ggplot(health, aes(x=hosp.beds, y=doctors)) +
geom_point() +
labs(x="Number of Hospital Beds", y="Number of Doctors")
# health data set with less than 1000 hospital beds
health_2 <- filter(health, hosp.beds < 1000)
ggplot(health_2, aes(x=hosp.beds, y=doctors)) +
geom_point() +
geom_smooth(method=lm , color="red", se=FALSE) +
labs(x="Number of Hospital Beds", y="Number of Doctors")
small_city_density <- read_csv(here("Data", "Small Cities Densities.csv"))
check_density <- small_city_density %>%
count(density)
check_density %>%
filter(n > 1)
# I see that 7 rows have more than 1 n, so we need to figure out how to make
# them a primary key
# see if they are accidental duplicates
small_city_density %>%
filter((density == 57 | density == 80 | density == 86 |
density == 95 | density == 106 | density == 108))
# no duplicate city codes, so just diff cities with same density
check_density <- small_city_density %>%
count(city.code, density)
check_density %>%
filter(n > 1)
small_city_density
# I didn't even realize city code was a primary key! But oh well, it got joined.
health <- health %>%
left_join(small_city_density)
health$density_levels <- health$density
health$density_levels[health$density<=79] <- "Low"
health$density_levels[health$density>=80 & health$density<=120 ] <- "Middle"
health$density_levels[health$density>=121] <- "High"
health$density_levels <- as_factor(health$density_levels)
View(health)
View(health)
health %>%
ggplot(aes(x=density_levels, y=density)) +
geom_bar(position = "fill") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(x="Density Levels", y="Number of Cities")
health %>%
ggplot(aes(x=density_levels)) +
geom_bar(position = "fill") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(x="Density Levels", y="Number of Cities")
health %>%
ggplot(aes(x=density_levels)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(x="Density Levels", y="Number of Cities")
health %>%
ggplot(aes(x=density_levels, y=density())) +
geom_bar(stat = "identity") +
theme_ipsum() +
labs(x="Quarters", y="Rating")
health %>%
ggplot(aes(x=density_levels, y=density())) +
geom_bar(stat = "identity") +
theme_ipsum() +
labs(x="Density Levels", y="Number of Cities")
health %>%
ggplot(aes(x=density_levels, y=density)) +
geom_bar(stat = "identity") +
theme_ipsum() +
labs(x="Density Levels", y="Number of Cities")
View(health)
health %>%
ggplot(aes(x=density_levels, y=density)) +
geom_bar(stat = "identity") +
theme_ipsum() +
labs(x="Density Levels", y="Number of Cities")
health %>%
ggplot(aes(x=density_levels, y=density)) +
geom_bar() +
theme_ipsum() +
labs(x="Density Levels", y="Number of Cities")
ggplot(health, aes(x=density_levels, y=density)) +
geom_bar() +
theme_ipsum() +
labs(x="Density Levels", y="Number of Cities")
ggplot(health, aes(x=density_levels, y=density)) +
geom_bar(stat = "identity") +
theme_ipsum() +
labs(x="Density Levels", y="Number of Cities")
ggplot(health, aes(x=density_levels, y=density)) +
geom_bar(stat = "identity") +
labs(x="Density Levels", y="Number of Cities")
View(health)
health %>%
ggplot(aes(x=density_levels, y=density)) +
geom_bar(stat = "identity") +
labs(x="Density Levels", y="Number of Cities")
health %>%
mutate(density_levels = fct_reorder(Low, Middle, High))
health %>%
mutate(density_levels = fct_reorder("Low", "Middle", "High"))
health %>%
ggplot(aes(x=density_levels, y=density)) +
geom_bar(stat = "identity") +
labs(x="Density Levels", y="Number of Cities")
health %>%
mutate(fct_relevel(density_levels, "Low", "Middle", "High"))
health %>%
mutate(fct_relevel(density_levels, "Low", "Middle", "High"))
health %>%
mutate(fct_relevel(density_levels, "Low", "Middle", "High")) %>%
ggplot(aes(x=density_levels, y=density)) +
geom_bar(stat = "identity") +
labs(x="Density Levels", y="Number of Cities")
health %>%
mutate(density_levels = fct_relevel(density_levels, "Low", "Middle", "High")) %>%
ggplot(aes(x=density_levels, y=density)) +
geom_bar(stat = "identity") +
labs(x="Density Levels", y="Number of Cities")
health %>%
mutate(density_levels = fct_relevel(density_levels, "Low", "Middle", "High")) %>%
ggplot(aes(x=density_levels, y=density)) +
geom_bar(stat = "identity") +
theme_ipsum()
health %>%
mutate(density_levels = fct_relevel(density_levels, "Low", "Middle", "High")) %>%
ggplot(aes(x=density_levels, y=density)) +
geom_bar(stat = "identity") +
scale_fill_brewer(palette = "Set1") +
theme_ipsum() +
labs(x="Density Levels", y="Number of Cities")
health %>%
mutate(density_levels = fct_relevel(density_levels, "Low", "Middle", "High")) %>%
ggplot(aes(x=density_levels, y=density)) +
geom_bar(stat = "identity") +
scale_fill_brewer(palette = "Set1") +
theme(legend.position="none") +
labs(x="Density Levels", y="Number of Cities")
health %>%
mutate(density_levels = fct_relevel(density_levels, "Low", "Middle", "High")) %>%
ggplot(aes(x=density_levels, y=density)) +
geom_bar() +
scale_fill_brewer(palette = "Set1") +
theme(legend.position="none") +
labs(x="Density Levels", y="Number of Cities")
health %>%
mutate(density_levels = fct_relevel(density_levels, "Low", "Middle", "High")) %>%
ggplot(aes(x=density_levels, y=density)) +
geom_bar( ) +
scale_fill_manual(values = c("red", "green", "blue") ) +
theme(legend.position="none") +
labs(x="Density Levels", y="Number of Cities")
health %>%
mutate(density_levels = fct_relevel(density_levels, "Low", "Middle", "High")) %>%
ggplot(aes(x=density_levels, y=density)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("red", "green", "blue") ) +
theme(legend.position="none") +
labs(x="Density Levels", y="Number of Cities")
health %>%
mutate(density_levels = fct_relevel(density_levels, "Low", "Middle", "High")) %>%
ggplot(aes(x=density_levels, y=density)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("red", "green", "blue")) +
theme(legend.position="none") +
labs(x="Density Levels", y="Number of Cities")
library(here)
library(tidyverse)
library(dplyr)
library(hrbrthemes)
library(here)
library(tidyverse)
library(dplyr)
library(hrbrthemes)
airlines <- read_csv(here("Data", "Airlines Data.csv"))
nyc_flights <- read_csv(here("Data", "NYC Flights 2013.csv"))
# Joining carriers from carrier data to flights data and renaming
flights_2 <- nyc_flights %>%
left_join(airlines, by = "carrier")
# made a stacked proportional bar plot
flights_2 %>%
group_by(name) %>%
filter(dest == "ATL") %>%
mutate(on_off_time = (arr_delay >= 0) == TRUE | (arr_delay < 0) == FALSE) %>%
ggplot(aes(x=name, fill=on_off_time)) +
geom_bar(position = "fill") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(x="Airlines", y="Proportion Arrived on Time to Atlanta",
fill="on time?")
# not sure how to remova NA's here
# less_than_500 <- flights_2 %>%
#select(flight, name) %>%
#filter(flight <= 500) %>%
#rename(other = "flight")
# I know I need to turn all carrier's with flights less than 500 into other,
# and then have them joined into the data and use that for the bar, but
# do not know how
#flights_2 %>%
#group_by(name) %>%
#filter(dest == "ATL", flight <= 500) %>%
#ggplot(aes(x=name, y=flight)) +
#geom_bar() +
#theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#labs(x="Airlines", y="Number of flights to Atlanta in 2013")
health <- read_csv(here("Data", "Small Cities Health Data.csv"))
health <- as_tibble(health)
ggplot(health, aes(x=hosp.beds, y=doctors)) +
geom_point() +
labs(x="Number of Hospital Beds", y="Number of Doctors")
# health data set with less than 1000 hospital beds
health_2 <- filter(health, hosp.beds < 1000)
ggplot(health_2, aes(x=hosp.beds, y=doctors)) +
geom_point() +
geom_smooth(method=lm , color="red", se=FALSE) +
labs(x="Number of Hospital Beds", y="Number of Doctors")
small_city_density <- read_csv(here("Data", "Small Cities Densities.csv"))
check_density <- small_city_density %>%
count(density)
check_density %>%
filter(n > 1)
# I see that 7 rows have more than 1 n, so we need to figure out how to make
# them a primary key
# see if they are accidental duplicates
small_city_density %>%
filter((density == 57 | density == 80 | density == 86 |
density == 95 | density == 106 | density == 108))
# no duplicate city codes, so just diff cities with same density
check_density <- small_city_density %>%
count(city.code, density)
check_density %>%
filter(n > 1)
small_city_density
# I didn't even realize city code was a primary key! But oh well, it got joined.
health <- health %>%
left_join(small_city_density)
health$density_levels <- health$density
health$density_levels[health$density<=79] <- "Low"
health$density_levels[health$density>=80 & health$density<=120 ] <- "Middle"
health$density_levels[health$density>=121] <- "High"
health$density_levels <- as_factor(health$density_levels)
health %>%
mutate(density_levels = fct_relevel(density_levels, "Low", "Middle", "High")) %>%
ggplot(aes(x=density_levels, y=density)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("red", "green", "blue")) +
theme(legend.position="none") +
labs(x="Density Levels", y="Number of Cities")
nyc_flights %>%
group_by(carrier) %>%
filter(dest == "ATL") %>%
mutate(on_off_time = (arr_delay >= 0) == TRUE | (arr_delay < 0) == FALSE) %>%
mutate(company = recode(carrier,
"9E" = "Endeavor Air Inc.",
"DL" = "Delta Air Lines Inc.",
"EV" = "ExpressJet Airlines Inc.",
"FL" = "AirTrain Airways Corporation",
"MQ" = "Envoy Air",
"UA" = "United Air Lines Inc.",
"WN" = "Southwest Airlines Co.")) %>%
ggplot(aes(x=fct_rev(company), fill=on_off_time)) +
geom_bar(position = "fill") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(x="Airlines", y="Proportion Arrived on Time to Atlanta",
fill="on time?")
