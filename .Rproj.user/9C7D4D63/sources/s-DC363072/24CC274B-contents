---
title: "R Matrices and Arrays"
author: "Michael A_ Seaman"
output: html_notebook
---

```{r}

library(here)

```

A matrix is a vector of vectors_ An array is a vector of matrices_ In this
notebook we will explore working with matrices and arrays in our scripts in our
scripts_


### Creating a Matrix

A matrix is created by creating a vector, but specifying that we want rows and
columns_ That is, we provide R a vector and two dimensions_

```{r}

# We can use the matrix function to create a matrix.

my_matrix <- matrix(c(15, 22, 25, 9, 14, 14, 29, 27, 19, 13, 21, 10),
                    nrow = 3,
                    ncol = 4)

my_matrix

# Let's remind ourselves about the class and default attributes of a matrix.

class(my_matrix)
attributes(my_matrix)

# If we leave off one dimension, the other will be inferred.

my_matrix <- matrix(c(15, 22, 25, 9, 14, 14, 29, 27, 19, 13, 21, 10),
                    nrow = 3)

my_matrix

my_matrix <- matrix(c(15, 22, 25, 9, 14, 14, 29, 27, 19, 13, 21, 10),
                    ncol = 4)

my_matrix

# We can switch the order of entry by setting byrow to TRUE. If we don't
# use byrow, it is assumed FALSE so that entry is by column.

my_matrix <- matrix(c(15, 22, 25, 9, 14, 14, 29, 27, 19, 13, 21, 10),
                    nrow = 3,
                    ncol = 4,
                    byrow = TRUE)

my_matrix

# A matrix can be created by binding columns.

column_1 <- c(15, 22, 25)
column_2 <- c(9, 14, 14)
column_3 <- c(29, 27, 19)
column_4 <- c(13, 21, 10)

my_matrix <- cbind(column_1, column_2, column_3, column_4)

my_matrix

# A matrix can be created by binding rows.

row_1 <- c(15, 9, 29, 13)
row_2 <- c(22, 14, 27, 21)
row_3 <- c(25, 14, 19, 10)

my_matrix <- rbind(row_1, row_2, row_3)

my_matrix

# A matrix can be created by giving a vector dimensions.

my_matrix <- c(15, 22, 25, 9, 14, 14, 29, 27, 19, 13, 21, 10)

dim(my_matrix) <- c(3, 4)

my_matrix

# Rows and columns can be named at the creation of a matrix.

my_matrix <- matrix(c(15, 22, 25, 9, 14, 14, 29, 27, 19, 13, 21, 10),
                    nrow = 3,
                    ncol = 4,
                    dimnames = list(c("Row 1", "Row 2", "Row 3"),
                                    c("Col 1", "Col 2", "Col 3", "Col 4")))

my_matrix

# Rows and columns can be named after the matrix is created.

my_matrix <- matrix(c(15, 22, 25, 9, 14, 14, 29, 27, 19, 13, 21, 10),
                    nrow = 3,
                    ncol = 4)

rownames(my_matrix) <- c("Row 1", "Row 2", "Row 3")
colnames(my_matrix) <- c("Col 1", "Col 2", "Col 3", "Col 4")

my_matrix

# We can also use these functions to dispense with names.

rownames(my_matrix) <- NULL

my_matrix

colnames(my_matrix) <- NULL

my_matrix

# Row and column names can be added all at once with dimnames, just as we
# did it when creating a matrix.

dimnames(my_matrix) <- list(c("Row 1", "Row 2", "Row 3"),
                            c("Col 1", "Col 2", "Col 3", "Col 4"))

my_matrix

dimnames(my_matrix) <- NULL

my_matrix

```


### Subsetting a Matrix

We can create a subset of a matrix, that is, extract elements of a matrix, by
extending vector extract operations to be two dimensional_

```{r}

# We can access a single element with a [row,column] format.

my_matrix[2,3]

# We can select multiple elements.

my_matrix[c(2,3),c(3,4)]

# We can select an entire row or column.

my_matrix[2,]

my_matrix[,3]

# We can leave out a row or column.

my_matrix[-1,]

my_matrix[,c(-2,-4)]

# If you subset with only one index, the matrix will be treated like a
# vector that is entered column by column.

my_matrix[2]

my_matrix[4]

# Logical vectors can be used to subset a matrix.

my_matrix[c(TRUE, TRUE, FALSE), c(TRUE, TRUE, FALSE, FALSE)]

# You can mix logical elements and integers.

my_matrix[c(TRUE, FALSE, TRUE), c(1,2)]

my_matrix[c(TRUE, FALSE, TRUE), -2]

# If the rows and/or columns of a matrix are named, we can use those to subset.

colnames(my_matrix) <- c("A", "B", "C", "D")

my_matrix

my_matrix[,c("A", "C")]

my_matrix[3, c("C", "D")]

```


### Modifying a Matrix

Like subsetting, matrix modification is an extension of vector modification,
though there are some additional functions that are specifically for working
with matrices_

```{r}

# Subsetting can be used to modify a matrix.

my_matrix

my_matrix[2, 2] <- 17

my_matrix

my_matrix[,"D"] <- c(14, 22, 10)

my_matrix

my_matrix[c(1,3),"D"] <- c(15, 11)

my_matrix

# Mathematical operations can be used on matrix elements.

my_matrix[3,] <- my_matrix[3,] + c(1, 2, 3, 4)

my_matrix

# Scalar math will operate on all selected elements.

my_matrix <- my_matrix * 2

my_matrix

my_matrix[,"A"] <- my_matrix[,"A"] + 5

my_matrix

# Rows or columns can be added with rbind or cbind.

E <- c(50, 51, 52)

my_matrix <- cbind(my_matrix, E)

my_matrix

# The dimensions of a matrix can be changed with the dim function.

dim(my_matrix) <- c(5, 3)

my_matrix

# A matrix can be transposed with the t function.

my_matrix <- t(my_matrix)

my_matrix

```


### Statistics with Matrices

R (and every other well-known statistical package on the planet) uses matrices
behind the scenes to perform statistical operations. The purpose of this
section is to demonstrate the calculation of statistics using matrices.

```{r}

# Let's begin with a vector of scores for 100 individuals.

n <- 100

score <- scan(here("scores.txt"))

# We can put this in standard matrix format, with individuals in rows
# and variables (in this case, just one variable) in columns.

dim(score) <- c(n, 1)

# Let's also create a vector of 100 1s_ This is known as the "summing
# vector_" We will turn it into a matrix as well.

ones <- rep(1, n)

dim(ones) <- c(n, 1)

# For any score vector, x, we can obtain the sum using 1'x.

score_sum <- t(ones) %*% score

sum(score)

# So the mean is given by pre-multiplying this matrix product by 1/n.

score_mean <- (1/n) * t(ones) %*% score

mean(score_mean)

# So now it is a simple step to deviation scores via matrices.

score_dev <- score - (ones %*% score_mean)

# So now we can calculate the sum of squares.

score_ss <- t(score_dev) %*% score_dev

# We could also go straight to the variance.

score_var <- (1/(n-1)) * t(score_dev) %*% score_dev

# Let's look at an alternative way to calculate some of these statistics.
# First we calculate a matrix filled with 1/n.

P <- (ones %*% t(ones))/n

# Next we calculate the identity matrix. The identity matrix has ones in
# the diagonal.

I <- diag(100)

# This is called the identity matrix because if you multiply it by any
# matrix, you get back the original matrix.

I %*% score

# Now we are going to calculate what is known as the "projection matrix".

Q = I - P

# Watch what happens when we pre-multiply our scores by Q.

Q %*% score

# Here's another cool operation with the projection matrix.

(1/(n-1)) * t(score) %*% t(Q) %*% Q %*% score

# Let's read in a couple more variables and add them to our matrix.

score_1 <- scan(here("data", "scores.txt"))
score_2 <- scan(here("data", "scores2.txt"))
score_3 <- scan(here("data", "scores3.txt"))

our_data <- cbind(score_1, score_2, score_3)

our_data_devs <- Q %*% our_data
our_data_covar <- (1/(n-1)) * t(our_data) %*% Q %*% our_data

# One more cool one.

D <- 1/sqrt(diag(our_data_covar))
D <- diag(D)

our_data_corr <- D %*% our_data_covar %*% D

```


### Arrays

Arrays provide additional dimensions. Working with arrays is an extension of
what we use to work with matrices, just like working with matrices is an
extension of what we use to work with vectors.

```{r}

# We can use the array function to create an array.

my_array <- array(c(15, 22, 25, 9, 14, 14, 29, 27, 19, 13, 21, 10,
                     16, 18, 5, 30, 18, 24, 27, 11, 17, 8, 28, 15),
                  dim = c(4, 3, 2))

my_array

# We can name the dimensions at the time of creation.

my_array <- array(c(15, 22, 25, 9, 14, 14, 29, 27, 19, 13, 21, 10,
                    16, 18, 5, 30, 18, 24, 27, 11, 17, 8, 28, 15),
                  dim = c(4, 3, 2),
                  dimnames = list(c("R1", "R2", "R3", "R4"),
                                  c("C1", "C2", "C3"),
                                  c("M1", "M2")))

my_array

# We can also name them after creation.

dimnames(my_array) <- NULL

my_array

dimnames(my_array) = list(c("R1", "R2", "R3", "R4"),
                          c("C1", "C2", "C3"),
                          c("M1", "M2"))

my_array

# Accessing elements of arrays is an extension of accessing elements of a
# matrix.

my_array[2, 3, 2]

my_array[, 2, ]

my_matrix_1 <- my_array[, , 1]
my_matrix_2 <- my_array[, , 2]

my_matrix_1
my_matrix_2

# As with matrices, we can apply mathematical operations across the array.

my_array * 2

```
