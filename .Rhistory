class_list <- list("Ali Alzughaibi", "Asiye Demir", "Bryan Terlizzi",
"Cade Abrams", "Dana Sox", "Erin Wilson", "Geophrey Odero",
"Hazza Bin-Hazza", "Hui Jiang", "Julie Wang",
"Michael Seidman", "Mohammed Quasem", "Olivia Lewis",
"Robyn Pernetti", "Ryan Dastrup", "Shelby Gonzales",
"Talal Alshehri", "Charles Walters")
sample(class_list, 3)
learning_group <- data.frame("ID" = 1:4,
"First Name" = c("Hazza", "Olivia", "Cade", "Mitchell"),
"Last Name" = c("Bin-Hazza", "Lewis", "Abrams", "Toomey"),
"Email" = c("binhazza@email.sc.edu", "ojlewis@email.sc.edu",
"tcabrams@email.sc.edu", "tt12@email.sc.edu"),
"Program of Study" = c("Language and Literacy", "Counselor Education",
"Physical Education", "Counselor Education"),
"Years in Program" = c("2", "2", "2",
"2"))
full_name <- paste(learning_group$First.Name, learning_group$Last.Name, sep = ",")
learning_group <- cbind(learning_group, full_name)
learning_group_new <- learning_group[, c(1, 2, 3, 7, 4, 5, 6)]
# Creating a logical variable if the learning group members are in their programs
# for more than two years.
learning_group_new$more.than.two.years <- learning_group_new$Years.in.Program >3
# a. load the mount juniper data and put it in a data fram
mount_juniper_data <- read.csv(here("Data","Mount Juniper Elementary Data.csv"))
data.frame(mount_juniper_data)
# b. check the score column to determine if there are missing data
anyNA(mount_juniper_data$Score)
# c. prints either "there are no missing data" or "there are missing data",
# depending on which is true
# I created a vector to indicate any missing values, and if there were, told
# it to display "there are missing data"
mount_juniper_missing <- anyNA(mount_juniper_data$Score)
mount_juniper_missing <- ifelse(mount_juniper_missing == TRUE,
"There are missing data")
print(mount_juniper_missing)
# Remove missing data
mount_juniper_data <- na.omit(mount_juniper_data)
# Coerce grade to factor
juniper_grade <- factor(mount_juniper_data$Grade,
levels = c(3, 4, 5),
labels = c("Grade 3", "Grade 4", "Grade 5"),
ordered = FALSE)
anova_grade <- aov(mount_juniper_data$Score ~ juniper_grade,
data = mount_juniper_data)
summary(anova_grade)
# Not sure if my "anova grade" object and summary function fulfill the
# first part for problem 6 too
# Store ANOVA in a separate object with the p-value extracted
anova_results <- summary(anova_grade)[[1]][[1,5]]
# not sure what the first 1 is, but the second 1,5 represents where the p-value
# is located in the anova table
# telling R to print not statistically significant if the p-value is > .05
anova_results <- ifelse(anova_results > .05,
"Not statistically significant")
print(anova_results)
# Adding a "results" attribute to the anova grade object
# I am using anova_grade as the object. I am not sure why exactly I use this
# and not the anova_results object-- but the latter shows attributes as NULL.
# I think because the anova_results object only has the sign. level in it.
attributes(anova_grade)$Results<- ifelse(anova_results > .05,
"Not statistically significant")
# Consider a population of normally distributed scores with a mean of 100 and a standard deviation of15. Write a script to draw 1,000 random samples, each of size 40, from this population.
norm_pop <- replicate(1000, sample(rnorm(1000, 100, 15), size = 40))
# Calculate and store each mean in a vector of means
norm_pop_means <- mean(norm_pop)
# Calculate the mean of the sample means
mean_of_means <- mean(norm_pop_means)
# Determine the difference between the true mean of 100 and the mean of the
# sample means
mean_of_means - 100
# meaning there is no real difference between the true mean and the sample mean
hsb2_scores <- subset(hsb2 [, 7:11])
hsb2_sd_list <- lapply(hsb2_scores, sd)
View(hsb2_scores)
hsb2_sd_vector <- sapply(hsb2_scores, sd)
View(hsb2_scores)
hsb2_scores$sd <- apply(hsb2_scores, MARGIN = 1, sd)
View(hsb2_scores)
hsb2_sd_vector
class(fivethous_sample)
Sample_means <- apply(fivethous_sample, 1, FUN = mean)
Sample_means
sample_means <- apply(fivethous_sample, 1, FUN = mean)
quantile(fivethous_sample,c(0.05,0.95))
quantile(sample_data,c(0.05,0.95))
quantile(sample_data, (0.05, 0.95))
quantile(fivethous_sample, 0.05)
quantile(fivethous_sample, 0.95)
quantile(fivethous_sample, c(0.05, 0.95))
quantile(fivethous_sample$fivethous_sample, c(0.05, 0.95))
View(fivethous_sample)
quantile(sample_means, c(0.05, 0.95))
library(here)
# Loads mount juniper elementary data into a data frame
mt_juniper_data <- read.csv(here("Data", "Mount Juniper Elementary Data.csv"))
mt_juniper_data <- data.frame(mt_juniper_data)
# Checks score column to determine if there are missing data
anyNA(mt_juniper_data$Score)
# prints either there are no missing data or there are missing data,
# depending on which is true
mt_juniper_missing <- anyNA(mt_juniper_data$Score)
mt_juniper_missing <- ifelse(mt_juniper_missing == TRUE,
"There are missing data")
print(mt_juniper_missing)
# Coerce grade to factor
juniper_grade <- factor(mt_juniper_data$Grade,
levels = c(3, 4, 5),
labels = c("Grade 3", "Grade 4", "Grade 5"),
ordered = FALSE)
anova_grade <- aov(mt_juniper_data$Score ~ juniper_grade,
data = mt_juniper_data)
summary(anova_grade)
# Store ANOVA in a separate object with the p-value extracted
anova_results <- summary(anova_grade)[[1]][[1,5]]
# not sure what the first 1 is, but the second 1,5 represents where the p-value
# is located in the anova table
# telling R to print not statistically significant if the p-value is > .05
anova_results <- ifelse(anova_results > .05,
"Not statistically significant",
"statistically significant")
print(anova_results)
# Adding a "results" attribute to the anova grade object
# I am using anova_grade as the object. I am not sure why exactly I use this
# and not the anova_results object-- but the latter shows attributes as NULL.
# I think because the anova_results object only has the sign. level in it.
attributes(anova_grade)$Results<- ifelse(anova_results > .05,
"Not statistically significant",
"statistically Significant")
# Consider a population of normally distributed scores with a mean of 100 and
# a standard deviation of15. Write a script to draw 1,000 random samples,
# each of size 40, from this population.
norm_pop <- replicate(1000, sample(rnorm(1000, 100, 15), size = 40))
# Calculate and store each mean in a vector of means
norm_pop_means <- mean(norm_pop)
# Calculate the mean of the sample means
mean_of_means <- mean(norm_pop_means)
# Determine the difference between the true mean of 100 and the mean of the
# sample means
mean_of_means - 100
# meaning there is no real difference between the true mean and the sample mean
# for loop
for(i in seq(from=0, to=1000, by=10)){
print(i)
}
# while loop
my_number <- 0
while (my_number <= 1000) {
print(my_number)
my_number <- my_number + 10
}
# repeat and break loop
my_number = NULL
my_number <- 0
repeat {
{
my_number <- my_number + 10
print(my_number)
}
if (my_number == 1000) {
break
}
}
secret_code <- read.csv(here("Data", "Secret Code.csv"), header = FALSE, sep = ",")
secret_message <- NULL
for(i in secret_code[c(8, 16, 24, 32)]) {
secret_message <- paste(secret_message, i, sep)
}
for(i in secret_code[c(8, 16, 24, 32)]) {
secret_message <- paste(secret_message, i, sep)
}
for(i in secret_code[c(8, 16, 24, 32)]) {
secret_message <- paste(secret_message, i, sep = "")
}
secret_message
library(here)
# Loads mount juniper elementary data into a data frame
mt_juniper_data <- read.csv(here("Data", "Mount Juniper Elementary Data.csv"))
mt_juniper_data <- data.frame(mt_juniper_data)
# Checks score column to determine if there are missing data
anyNA(mt_juniper_data$Score)
# prints either there are no missing data or there are missing data,
# depending on which is true
mt_juniper_missing <- anyNA(mt_juniper_data$Score)
mt_juniper_missing <- ifelse(mt_juniper_missing == TRUE,
"There are missing data")
print(mt_juniper_missing)
# Coerce grade to factor
juniper_grade <- factor(mt_juniper_data$Grade,
levels = c(3, 4, 5),
labels = c("Grade 3", "Grade 4", "Grade 5"),
ordered = FALSE)
anova_grade <- aov(mt_juniper_data$Score ~ juniper_grade,
data = mt_juniper_data)
summary(anova_grade)
# Store ANOVA in a separate object with the p-value extracted
anova_results <- summary(anova_grade)[[1]][[1,5]]
# not sure what the first 1 is, but the second 1,5 represents where the p-value
# is located in the anova table
# telling R to print not statistically significant if the p-value is > .05
anova_results <- ifelse(anova_results > .05,
"Not statistically significant",
"statistically significant")
print(anova_results)
# Adding a "results" attribute to the anova grade object
# I am using anova_grade as the object. I am not sure why exactly I use this
# and not the anova_results object-- but the latter shows attributes as NULL.
# I think because the anova_results object only has the sign. level in it.
attributes(anova_grade)$Results<- ifelse(anova_results > .05,
"Not statistically significant",
"statistically Significant")
# Consider a population of normally distributed scores with a mean of 100 and
# a standard deviation of15. Write a script to draw 1,000 random samples,
# each of size 40, from this population.
norm_pop <- replicate(1000, sample(rnorm(1000, 100, 15), size = 40))
# Calculate and store each mean in a vector of means
norm_pop_means <- mean(norm_pop)
# Calculate the mean of the sample means
mean_of_means <- mean(norm_pop_means)
# Determine the difference between the true mean of 100 and the mean of the
# sample means
mean_of_means - 100
# meaning there is no real difference between the true mean and the sample mean
# for loop
for(i in seq(from=0, to=1000, by=10)){
print(i)
}
# while loop
my_number <- 0
while (my_number <= 1000) {
print(my_number)
my_number <- my_number + 10
}
# repeat and break loop
my_number = NULL
my_number <- 0
repeat {
{
my_number <- my_number + 10
print(my_number)
}
if (my_number == 1000) {
break
}
}
secret_code <- read.csv(here("Data", "Secret Code.csv"), header = FALSE, sep = ",")
secret_message <- NULL
for(i in secret_code[c(8, 16, 24, 32)]) {
secret_message <- paste(secret_message, i, sep = "")
}
secret_message
# a. load the sample sata into an object. These data contain 30 scores
# selected at random from an unknown population
sample_data <- read.csv(here("Data", "Sample Data.csv"), header = TRUE,
sep = ",")
# b. Select and store 5,000 samples of size 30 that are sampled from the
# Sample Data with replacement. (Hint: use the sample function)
fivethous_sample <- sample(sample_data, size = 5000, replace = TRUE)
# c. Calculate and store the mean of every sample. Collectively these
# means will be an estimate of the sampling distribution of the mean.
sample_means <- apply(fivethous_sample, 1, FUN = mean)
# d. The 5th and 95th percentiles of the sampling distribution are the
# boundaries of a 90% confidence interval. Calculate these and report your
# interval.
quantile(sample_means, c(0.05, 0.95))
# The boundaries for a 90% confidence interval are (243.6, 418.7)
sample_data <- read.csv(here("Data", "Sample Data.csv"))
library(here)
# Loads mount juniper elementary data into a data frame
mt_juniper_data <- read.csv(here("Data", "Mount Juniper Elementary Data.csv"))
# prints either there are no missing data or there are missing data,
# depending on which is true
mt_juniper_missing <- anyNA(mt_juniper_data$Score)
mt_juniper_missing <- ifelse(mt_juniper_missing,
"There are missing data",
"There are no missing data")
print(mt_juniper_missing)
# Coerce grade to factor
juniper_grade <- factor(mt_juniper_data$Grade,
levels = c(3, 4, 5),
labels = c("Grade 3", "Grade 4", "Grade 5"),
ordered = FALSE)
anova_grade <- aov(mt_juniper_data$Score ~ juniper_grade,
data = mt_juniper_data)
# Store ANOVA in a separate object with the p-value extracted
anova_results <- summary(anova_grade)[[1]][[1, 5]]
# telling R to print not statistically significant if the p-value is > .05
anova_results <- ifelse(anova_results > .05,
"Not statistically significant",
"statistically significant")
print(anova_results)
# Adding a "results" attribute to the anova grade object
# I am using anova_grade as the object. I am not sure why exactly I use this
# and not the anova_results object-- but the latter shows attributes as NULL.
# I think because the anova_results object only has the sign. level in it.
attributes(anova_grade)$Results<- ifelse(anova_results > .05,
"Not statistically significant",
"statistically Significant")
# Consider a population of normally distributed scores with a mean of 100 and
# a standard deviation of15. Write a script to draw 1,000 random samples,
# each of size 40, from this population.
norm_pop <- replicate(1000, sample(rnorm(1000, 100, 15), size = 40))
# Calculate and store each mean in a vector of means
norm_pop_means <- colMeans(norm_pop)
# Calculate the mean of the sample means
mean_of_means <- mean(norm_pop_means)
# Determine the difference between the true mean of 100 and the mean of the
# sample means
mean_of_means - 100
# meaning there is no real difference between the true mean and the sample mean
# this is an unbiased statistic
# for loop
for(i in seq(from=0, to=1000, by=10)){
print(i)
}
# while loop
my_number <- 0
while (my_number <= 1000) {
print(my_number)
my_number <- my_number + 10
}
# repeat and break loop
my_number = NULL
my_number <- 0
repeat {
{
my_number <- my_number + 10
print(my_number)
}
if (my_number == 1000) {
break
}
}
secret_code <- read.csv(here("Data", "Secret Code.csv"), header = FALSE)
secret_message <- NULL
for (i in 1:23) {
for(j in c(8, 16, 24, 32)) {
secret_message <- paste(secret_message, secret_code[i, j], sep = "")
}
}
secret_message
sample_data <- read.csv(here("Data", "Sample Data.csv"))
sample_data <- sample_data[, 1]
fivethous_sample <- data.frame(matrix(ncol = 500, nrow = 30))
for (i in 1:5000) {
fivethous_sample[ , i] <- sample(sample_data, size = 30,
replace = TRUE)
}
sample_means <- colMeans(fivethous_sample)
bounds <- quantile(sample_means, c(0.05, 0.95))
print(bounds)
methods(data.frame)
library(here)
my_data <- data.frame("ID" = 1:4,
"Name" = c("Greg", "Sara", "Manuel", "Liz"),
"Score" = c(23, 27, 26, 29))
View(my_data)
my_data <- data.frame(1:4,
c("Greg", "Sara", "Manuel", "Liz"),
c(23, 27, 26, 29))
View(my_data)
my_data <- data.frame("ID" = 1:4,
"Name" = c("Greg", "Sara", "Manuel", "Liz"),
"Score" = c(23, 27, 26, 29))
View(my_data)
my_data <- data.frame(1:4,
c("Greg", "Sara", "Manuel", "Liz"),
c(23, 27, 26, 29))
View(my_data)
my_data <- data.frame("ID" = 1:4,
"Name" = c("Greg", "Sara", "Manuel", "Liz"),
"Score" = c(23, 27, 26, 29),
stringsAsFactors = FALSE)
View(my_data)
percent_agreement <- data.frame("Percent Agreement",
"Rater 1",
"Rater 2",
"Rater 3",
"Rater 4")
View(percent_agreement)
new_data <- data.frame("ID" = 5:6,
"Name" = c("Laura", "Patricia"),
"Score" = c(28, 25),
"Gender" = c("Female", "Female"),
"Age" = c(14, 13),
"Transfer" = c(TRUE, FALSE))
View(new_data)
percent_agreement <- data.frame("Rater 1" = 1, 4, 5, 6,
"Rater 2" = c(1, 3, 4, 7),
"Rater 3" = c(2, 3, 4, 5),
"Rater 4" = c(1, 2, 3, 4))
View(percent_agreement)
percent_agreement <- data.frame("Rater 1" = 1, 4, 5, 6,
"Rater 2" = c(1, 3, 4, 7),
"Rater 3" = c(2, 3, 4, 5),
"Rater 4" = c(1, 2, 3, 4))
View(percent_agreement)
percent_agreement <- data.frame("Rater 1" = (1, 4, 5, 6),
percent_agreement <- data.frame("Rater 1" = c(1, 4, 5, 6),
"Rater 2" = c(1, 3, 4, 7),
"Rater 3" = c(2, 3, 4, 5),
"Rater 4" = c(1, 2, 3, 4))
View(percent_agreement)
percent_agreement <- data.frame("Rater_1" = c(1, 4, 5, 6),
"Rater_2" = c(1, 3, 4, 7),
"Rater_3" = c(2, 3, 4, 5),
"Rater_4" = c(1, 2, 3, 4))
View(percent_agreement)
class(percent_agreement)
percent_agreement <- data.frame("Rater_1" = c(1, 4, 5, 6),
"Rater_2" = c(1, 3, 4, 6),
"Rater_3" = c(2, 3, 4, 5),
"Rater_4" = c(1, 2, 3, 4))
percent_agreement <- function (x) {
percent_agreement <- data.frame("Rater_1" = c(1, 4, 5, 6),
"Rater_2" = c(1, 3, 4, 6),
"Rater_3" = c(2, 3, 4, 5),
"Rater_4" = c(1, 2, 3, 4))
}
View(percent_agreement)
data_frame <- data.frame("Rater_1" = c(1, 4, 5, 6),
"Rater_2" = c(1, 3, 4, 6),
"Rater_3" = c(2, 3, 4, 5),
"Rater_4" = c(1, 2, 3, 4))
percent_agreement <- function (x) {
raters <- data.frame("Rater_1" = c(1, 4, 5, 6),
"Rater_2" = c(1, 3, 4, 6),
"Rater_3" = c(2, 3, 4, 5),
"Rater_4" = c(1, 2, 3, 4))
}
View(percent_agreement)
raters <- data.frame("Rater_1" = c(1),
"Rater_2" = c(1),
"Rater_3" = c(2))
View(raters)
methods(mean)
num_raters <- ncol(my_dataframe)
my_dataframe <- data.frame(NULL)
num_raters <- ncol(my_dataframe)
num_observations <- nrow(mt_dataframe)
View(my_dataframe)
num_observations <- nrow(my_dataframe)
View(my_dataframe)
y_dataframe <- as.data.frame(NULL)
num_raters <- ncol(my_dataframe)
num_observations <- nrow(my_dataframe)
View(y_dataframe)
# Determine number of raters and observations
num_raters <- ncol(my_dataframe)
A <- c(1, 3, 4, 2, 5, 6, 2, 1)
B <- c(1, 3 ,5, 4, 6, 1, 2, 1)
A == B
sum(A == B)
(sum(A == B)/ length(A))* 100
pa_matrix <- matrix(nrow = n_raters - 1, ncol = n_raters)
library(readr)
Music_Performance_Data <- read_csv("Data/Music Performance Data.csv")
View(Music_Performance_Data)
View(Music_Performance_Data)
num_raters <- ncol(Music_Performance_Data, subset[ , 2:9])
num_raters <- ncol(Music_Performance_Data, [ , 2:9])
num_raters <- ncol(Music_Performance_Data)
num_observations <- nrow(Music_Performance_Data)
class(Music_Performance_Data)
num_raters <- colnames(Music_Performance_Data, [ , 2:9])
num_raters <- ncol(Music_Performance_Data[2:9])
View(Music_Performance_Data)
num_raters
data.frame(num_raters)
A <- c(num_raters)
B <- c(num_observations)
A == B
sum(A == B)
(sum(A == B)/ length(A))* 100
num_raters <- ncol(Music_Performance_Data[2:9])
Data <- read_csv("Data", "Music Performance Data.csv")
library(here)
Data <- read_csv(here("Data", "Music Performance Data.csv"))
View(Data)
Music_Performance_Data <- read_csv(here("Data", "Music Performance Data.csv"))
num_raters <- ncol(Music_Performance_Data[2:9])
num_observations <- nrow(Music_Performance_Data)
A <- c(num_raters)
B <- c(num_observations)
A == B
sum(A == B)
(sum(A == B)/ length(A))* 100
library(here)
Music_Performance_Data <- read_csv(here("Data", "Music Performance Data.csv"))
# Determine number of raters and observations
num_raters <- ncol(Music_Performance_Data[2:9])
num_observations <- nrow(Music_Performance_Data)
A <- c(length(num_raters))
B <- c(Length(num_observations))
B <- c(length(num_observations))
A
num_raters
num_raters <- ncol(Music_Performance_Data)
library(here)
Music_Performance_Data <- read_csv(here("Data", "Music Performance Data.csv"))
library(here)
Music_Performance_Data <- read_csv(here("Data", "Music Performance Data.csv"))
num_raters <- ncol(Music_Performance_Data)
num_observations <- nrow(Music_Performance_Data)
length(num_observations)
collapse_matrix <- matrix(c(1, 2, 3, 4, 5, 6),
ncol = 2,
byrow = TRUE)
collapse_matrix
collapse_matrix <- matrix(c(1, 2, 4, 4, 5, 6),
ncol = 2,
byrow = TRUE)
collapse_matrix
