---
title: "Objects and Functions"
author: "Michael A. Seaman"
output: html_notebook
---

In this notebook we will explore the basics of objects and functions. 
Everything that exists is an object. Everything that happens is a function
call.

### Objects

All objects have a mode, class, and type. The mode is the classification of
the basic structure of the object. THe class is a property of the object that
determines how functions can operate on that object. The type tells what is
contained within the object.

For us to do anything in R, we need to use function calls because "everything
that happens is a function call." Here I will use three function calls to
look at an object.

```{r include=FALSE}

mode(2)
class(2)
typeof(2)

```

There are four basic modes for data objects: numeric, complex, character, and
logical. What is more important to us is the class of the object, so that is
what I'm going to focus on throughout the course.

#### Atomic Vectors

An atomic vector is a sequence of data of the same type. To build vectors,
we "concatenate" the members of the sequence with the concatenate function.
We can then assign this to an object we create with a name that we choose.

```{r include=FALSE}

# Here is an example of a vector.

even_nums <- c(2, 4, 6, 8, 10, 12, 14, 16)

# We can see the class of this object.

class(even_nums)

# We can also see the type of data.

typeof(even_nums)

# If we want to force the vector to be integers, we need to add L.
# We shouldn't need to do this, but now we know what R means when
# the output includes L.

even_nums_2 <- c(2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L)

class(even_nums_2)
typeof(even_nums_2)

# Here's a vector of logical values.

true_or_false <- c(TRUE, TRUE, FALSE, TRUE, FALSE)

class(true_or_false)
typeof(true_or_false)

# Here's a vector of characters.

our_course <- c("E", "D", "R", "M", "7", "1", "8")

class(our_course)
typeof(our_course)

# What if we put multiple characters between quotes? These are called
# strings, but they still are part of the same class. Technically, a
# string is one or more characters, so characters are strings.

our_course_2 <- c("EDRM", "718")

class(our_course_2)
typeof(our_course_2)

```

#### Implicit Coercion

When we mix data types when creating a vector, this becomes an atomic vector
through implicit coercion. Data at "lower levels" are changed to a higher
level.

```{r include=FALSE}

different_types <- c(2L, 4L, 6.2, 8.8)

class(different_types)
typeof(different_types)

different_types_2 <- c(TRUE, TRUE, FALSE, "EDRM", "718")

class(different_types_2)
typeof(different_types_2)

different_types_3 <- c(TRUE, TRUE, FALSE, 2L, 4L)

class(different_types_3)
typeof(different_types_3)

different_types_4 <- c(TRUE, 2L, 4, "EDRM")

class(different_types_4)
typeof(different_types_4)

```

#### Checking Data Type

As we will see later, it is often useful to check for the type of data with
a function that returns a logical value. The "is" functions do this for us.

```{r}

# We can also check the type of data in a vector using the "is" functions.

is.integer(even_nums)
is.double(even_nums)

is.integer(even_nums_2)

# Watch what happens when we ask whether the vector is numeric.

is.numeric(even_nums)
is.numeric(even_nums_2)

# A couple more useful is statements.

is.logical(true_or_false)
is.character(our_course)
is.atomic(our_course)
is.vector(even_nums)

```

#### Other Useful Vector Functions

We have seen that function calls are of the form function_name(stuff) where
we send the function something in parentheses. As we will discuss in more
detail later, the "stuff" in the parentheses is called an "argument".

Here we look at a few more useful vector functions.

```{r}

# Other Useful Vector Functions -------------------------------------------

# We can explicitly coerce vectors into different data types.

logic_to_numeric <- as.numeric(true_or_false)
numeric_to_character <- as.character(even_nums)
numeric_to_logical <- as.logical(even_nums)

# We can find out how many elements are in a vector_

length(even_nums)

# Even a scalar is a vector of length 1_

my_scalar <- 5
length(my_scalar)
length(5)

# We indicate that an element of a vector is missing with NA_

my_data <- c(59, 62, 65, 62, 60, 65, 64, NA, 70, 69, 61, 63, 58)

# Let's check for missing data_

is.na(my_data)

```

#### Attributes

Objects in R have attributes, just as objects in the real world have
attributes. Some of these are built-in to objects of a certain class, but we
can change attributes and even create new attributes.

```{r}

# We can check the attributes of an object.

attributes(even_nums)

# We can add attributes to an object.

names(even_nums) <- c("two", "four", "six", "eight", "ten", "twelve",
                      "fourteen", "sixteen")

even_nums

attributes(even_nums)

# Names can be added when we create an object.

odd_nums <- c("one" = 1, "three" = 3, "five" = 5, "seven" = 7)

odd_nums

# We can add comments to an object.

comment(even_nums) <- c("A list of even numbers", "Created 17 Jan 2021")

attributes(even_nums)

# We can even create attributes.

attr(even_nums, "category") <- "even numbers"

attributes(even_nums)

```

#### Matrices and Arrays

A matrix is a two-dimensional object in which every data element is the same
as every other data element. Thus, matrices are atomic. An array is an
extension of a matrix in that it has more than two dimensions and is also
atomic.

```{r include=FALSE}

# There are multiple ways to create a matrix_ One way is to give two
# dimensions to a vector.

student_scores <- c( 1,  2,  3,  4,
                    47, 51, 55, 45,
                    41, 52, 52, 57)

dim(student_scores) <- c(4, 3)

student_scores

# Another way is to use the matrix function.

student_scores <- matrix( c( 1,  2,  3,  4,
                            47, 51, 55, 45,
                            41, 52, 52, 57),
                          nrow = 4,
                          ncol = 3 )

student_scores

# Notice that the default is to enter elements in columns. We can change
# that to enter elements in rows.

student_scores <- matrix( c( 1, 47, 41,
                             2, 51, 52,
                             3, 55, 52,
                             4, 45, 57),
                          nrow = 4,
                          ncol = 3,
                          byrow = TRUE)

student_scores

# Let's look at the class and other attributes of a matrix.

class(student_scores)
attributes(student_scores)
typeof(student_scores)
is.numeric(student_scores)
is.matrix(student_scores)
length(student_scores)

# We can add names to one or more dimensions.

rownames(student_scores) <- c("A", "B", "C", "D")
colnames(student_scores) <- c("ID", "math", "reading")

student_scores

comment(student_scores) <- c("data from 3rd grade study",
                             "collected on 15 Nov 2018")

attributes(student_scores)

# If we decide the names don't add much, we can remove them.

rownames(student_scores) <- NULL
student_scores

# You can read from a text or csv file and then convert to a matrix.

student_scores <- read.csv(here ("Data", "Student Scores.csv"),
                           header = FALSE,
                           sep = ",")

student_scores <- as.matrix(student_scores)

student_scores

# We can create matrices from multiple atomic vectors.

A <- c(1, 47, 41)
B <- c(2, 51, 52)
C <- c(3, 55, 52)
D <- c(4, 45, 57)

student_scores <- rbind(A, B, C, D)
student_scores

ID <- c(1, 2, 3, 4)
math <- c(47, 51, 55, 45)
reading <- c(41, 52, 52, 57)

student_scores <- cbind(ID, math, reading)
student_scores

# Here's an array to illustrate that we can extend beyond two dimensions.

student_scores <- c( 1,  2,  3,  4,
                     47, 51, 55, 45,
                     41, 52, 52, 57,
                      1,  2,  3,  4,
                     49, 53, 58, 44,
                     45, 55, 58, 57)

dim(student_scores) <- c(4, 3, 2)

col_names <- c("ID", "math", "reading")
matrix_names <- c("time 1", "time 2")

dimnames(student_scores) <- list(NULL, col_names, matrix_names)

student_scores

```

#### Factors

In R, categorical data are called "factors." The different categories are
called the "levels" of the factor.

```{r include=FALSE}

study_group <- c(1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3)
group_factor <- factor(study_group)

typeof(study_group)
typeof(group_factor)

class(study_group)
class(group_factor)

attributes(study_group)
attributes(group_factor)

# We can assign preferred levels.

group_factor <- factor(study_group, labels = c("Placebo", "Trt A", "Trt B"))

attributes(group_factor)

```

#### Lists

Lists can contain data of different types. That is, they are not required to be
atomic. In fact, lists can contain any combination of vectors, matrices,
arrays, factors, and other lists.

```{r}

simple_list <- list("South Carolina", "SC", 5153463, 32020, "Columbia")

names(simple_list) <- c("State", "Abbreviation", "Population",
                        "Square Miles", "Capitol")

simple_list
simple_list$`Square Miles`

class(simple_list)
typeof(simple_list)
attributes(simple_list)

analysis_results <- list(estimate = 10.5,
                         p_value = 0.0032,
                         decision = "statistically significant",
                         confidence_interval = c(8.0, 13.0))

analysis_results
analysis_results$confidence_interval

```

#### Data Frames

Data frames are special types of lists. Each element of the list is a vector,
but all of the vectors must be of equal length. This makes data frames ideal
for research data sets in which rows are the units of analysis and the columns
are variables. Each column can be a different type of data, but all values
within the column must be the same type and all columns must have the same
length.

```{r include=FALSE}

student_data <- data.frame(c("John", "Gordon", "Tabitha", "Ibrahim"),
                           c(101, 102, 103, 104),
                           c(89, 92, 91, 92))

names(student_data) <- c("Name", "ID", "Score")

student_data

class(student_data)
typeof(student_data)
attributes(student_data)

# We could  include the names of variables when we create the data frame.

student_data <- data.frame(Name = c("John", "Gordon", "Tabitha", "Ibrahim"),
                           ID = c(101, 102, 103, 104),
                           Score = c(89, 92, 91, 92))

student_data

# Let's look at the name functions.

names(student_data)
rownames(student_data)
colnames(student_data)

# Suppose we don't want row names.

rownames(student_data) <- NULL
student_data

# R requires data frames to have both column names and row names.
# We can suppress viewing the row names.

print(student_data, row.names = FALSE)

# Many import functions assume that we want a data frame.

juniper_data <- read.csv(here("Data", "Mount Juniper Elementary Data.csv"),
                         header = TRUE,
                         sep = ",")

class(juniper_data)
attributes(juniper_data)

```

#### Functions

The functions in R are the reason we are here. If all we did was look at
objects, but nothing ever happened, we would get bored soon. We want action!
We demand action! Functions to the rescue.

Normal functions are identified by a function name and parentheses that enclose
"arguments". Arguments are what we send to the function to tell it how to act.

Functions often return something to us, but not always.

```{r include=FALSE}

# Let's use the mean function as our first example.

?mean

my_data <- c(2, 2, 3, 3, 4, 5, 7, 7, 9, 11)

class(mean)

my_data_mean <- mean(my_data)

class(my_data_mean)
typeof(my_data_mean)

# A function is an object, so it can be assigned to an object.

my_mean <- mean
my_mean(my_data)

# The mean function returns a numeric vector with type "double" data. Thus,
# if we want to calculate the mean of means of three samples, we should be able
# to do this directly. First, let's do it in steps.

sample_1 <- c(1, 2, 2, 3, 4)
sample_2 <- c(3, 3, 4, 4, 6)
sample_3 <- c(1, 4, 5, 5, 6)

sample_1_mean <- mean(sample_1)
sample_2_mean <- mean(sample_2)
sample_3_mean <- mean(sample_3)

mean_of_means <- mean(c(sample_1_mean,
                        sample_2_mean,
                        sample_3_mean))

# We can skip the middle man!

mean_of_means_2 <- mean(c(mean(sample_1),
                          mean(sample_2),
                          mean(sample_3)))

# We could have done all of the above with one function.

mean_of_means_3 <- mean(c(mean(c(1, 2, 2, 3, 4)),
                          mean(c(3, 3, 4, 4, 6)),
                          mean(c(1, 4, 5, 5, 6))))

```

#### Operators

Operators are functions that have special abbreviations. They are set up this
way because they are so commonly used that it would be cumbersome to use the
normal function notation when we want to carry out these actions.

```{r}

# Assignment Operators ----------------------------------------------------

# We can assign three different ways.

a <- c(1, 2, 3)

b <<- c(4, 5, 6)

c = c(7, 8, 9)

# We can also assign on the right side.

c(10, 11, 12) -> d

c(13, 14, 15) ->> e


# Arithmetic Operators ----------------------------------------------------

# Add

17 + 23

a + b

# Subtract

40 - 23

b - a

# Multiply

4 * 11

a * b

# Divide

44 / 4

a / b

# Exponentiate

4 ^ 3

b ^ a

# Modulus

13 %% 3

b %% a

# Integer divide

13 %/% 3

b %/% a

# Note that arithmetic with a scalar will apply to all elements.

a + 4

# Relational Operators ----------------------------------------------------

# Less than

7 < 5

a < b

# Greater than

7 > 5

a > b

# Less than or equal to

7 <= 5

5 <= 5

a <= b

# Greater than or equal to

7 >= 5

5 >= 5

a >= b

# Equal to

7 == 5

5 == 5

a == b

# Not equal to

7 != 5

5 != 5

a != b


# Logical Operators -------------------------------------------------------

logic_vector_1 <- c(TRUE, TRUE, FALSE)
logic_vector_2 <- c(TRUE, FALSE, FALSE)

# Element-wise logical AND

logic_vector_1 & logic_vector_2

# Element-wise logical OR

logic_vector_1 | logic_vector_2

# Logical NOT

!logic_vector_1

# Logical AND

logic_vector_1 && logic_vector_2

5 && 5

5 && 6

0 && 1

# Logical OR

logic_vector_1 || logic_vector_2

5 || 5

5 || 6

0 || 1


# Miscellaneous Operators -------------------------------------------------

# Sequence operator

one_to_ten <- c(1:10)

# In operator

5 %in% one_to_ten

12 %in% one_to_ten

# Matrix multiply with transpose operator

A <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2, byrow = TRUE)
B <- matrix(c(5, 6, 7, 8), nrow = 2, ncol = 2, byrow = TRUE)

A
B

# Some simple math operations with matrices.

A + B

A * B

# This is a matrix and the transpose of the matrix.

A
t(A)

# Now let's use the multiple with transpose operator.

A %*% t(A)

# Here is how it is multiplying to obtain the elements of a new matrix.

# (1)(1) + (2)(2)
# (1)(3) + (2)(4)
# (3)(1) + (4)(2)
# (3)(3) + (4)(4)

```

